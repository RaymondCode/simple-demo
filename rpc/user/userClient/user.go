// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userClient

import (
	"context"
	user2 "tikstart/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest      = user2.CreateRequest
	CreateResponse     = user2.CreateResponse
	PingRequest        = user2.PingRequest
	PingResponse       = user2.PingResponse
	QueryByIdRequest   = user2.QueryByIdRequest
	QueryByNameRequest = user2.QueryByNameRequest
	QueryResponse      = user2.QueryResponse

	User interface {
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		QueryById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*QueryResponse, error)
		QueryByName(ctx context.Context, in *QueryByNameRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUser) QueryById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.QueryById(ctx, in, opts...)
}

func (m *defaultUser) QueryByName(ctx context.Context, in *QueryByNameRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.QueryByName(ctx, in, opts...)
}
