// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"tikstart/service/rpc/user/internal/logic"
	"tikstart/service/rpc/user/internal/svc"
	"tikstart/service/rpc/user/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Ping(ctx context.Context, in *user.PingRequest) (*user.PingResponse, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *UserServer) Create(ctx context.Context, in *user.CreateRequest) (*user.CreateResponse, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *UserServer) QueryById(ctx context.Context, in *user.QueryByIdRequest) (*user.QueryResponse, error) {
	l := logic.NewQueryByIdLogic(ctx, s.svcCtx)
	return l.QueryById(in)
}

func (s *UserServer) QueryByName(ctx context.Context, in *user.QueryByNameRequest) (*user.QueryResponse, error) {
	l := logic.NewQueryByNameLogic(ctx, s.svcCtx)
	return l.QueryByName(in)
}
